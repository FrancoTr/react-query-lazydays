{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    staleTime: 600000 // 10 minutes\n  });\n\n  return data;\n}\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});\nexport function usePrefetchtreatments() {\n  _s2();\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n_s2(usePrefetchtreatments, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","staleTime","usePrefetchtreatments","queryClient","prefetchQuery"],"sources":["C:/Users/franc/Desktop/projects/react-query-lazydays/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\r\n\r\nimport type { Treatment } from '../../../../../shared/types';\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\n\r\nasync function getTreatments(): Promise<Treatment[]> {\r\n  const { data } = await axiosInstance.get('/treatments');\r\n  return data;\r\n}\r\n\r\nexport function useTreatments(): Treatment[] {\r\n  const fallback = [];\r\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\r\n    staleTime: 600000, // 10 minutes\r\n  });\r\n  return data;\r\n}\r\n\r\nexport function usePrefetchtreatments(): void {\r\n  const queryClient = useQueryClient();\r\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAGtD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAE1D,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,aAAa,CAACI,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEH,IAAI,GAAGG;EAAS,CAAC,GAAGR,QAAQ,CAACG,SAAS,CAACM,UAAU,EAAEL,aAAa,EAAE;IACxEM,SAAS,EAAE,MAAM,CAAE;EACrB,CAAC,CAAC;;EACF,OAAOL,IAAI;AACb;AAAC,GANeE,aAAa;EAAA,QAECP,QAAQ;AAAA;AAMtC,OAAO,SAASW,qBAAqB,GAAS;EAAA;EAC5C,MAAMC,WAAW,GAAGX,cAAc,EAAE;EACpCW,WAAW,CAACC,aAAa,CAACV,SAAS,CAACM,UAAU,EAAEL,aAAa,CAAC;AAChE;AAAC,IAHeO,qBAAqB;EAAA,QACfV,cAAc;AAAA"},"metadata":{},"sourceType":"module"}