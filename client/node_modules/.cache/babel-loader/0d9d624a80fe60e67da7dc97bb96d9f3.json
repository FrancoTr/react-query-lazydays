{"ast":null,"code":"var _s = $RefreshSig$();\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear';\n\n// for useQuery call\nasync function getAppointments(year, month) {\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n}\n\n// types for hook return object\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs());\n\n  // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\n\n  // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n  const [showAll, setShowAll] = useState(false);\n\n  // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n  const {\n    user\n  } = useUser();\n  const selectFn = useCallback(data => getAvailableAppointments(data, user), [user]);\n\n  /** ****************** END 2: filter appointments  ******************** */\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n\n  const commonOptions = {\n    staleTime: 0,\n    cacheTime: 300000 // 5 minutes\n  };\n\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery([queryKeys.appointments, nextMonthYear.year, nextMonthYear.month], () => {\n      getAppointments(nextMonthYear.year, nextMonthYear.month), commonOptions;\n    });\n  }, [queryClient, monthYear]);\n\n  // TODO: update with useQuery!\n  // Notes:\n  //    1. appointments is an AppointmentDateMap (object with days of month\n  //       as properties, and arrays of appointments for that day as values)\n  //\n  //    2. The getAppointments query function needs monthYear.year and\n  //       monthYear.month\n  const fallback = {};\n  const {\n    data: appointments = fallback\n  } = useQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => {\n    getAppointments(monthYear.year, monthYear.month);\n  }, {\n    select: showAll ? undefined : selectFn,\n    staleTime: 0,\n    cacheTime: 300000,\n    // 5 minutes\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true\n  });\n\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n_s(useAppointments, \"hxmAu3AY4pN9y6IRQ7SYW7i1ghk=\", false, function () {\n  return [useUser, useQueryClient, useQuery];\n});","map":{"version":3,"names":["dayjs","useCallback","useEffect","useState","useQuery","useQueryClient","axiosInstance","queryKeys","useUser","getAvailableAppointments","getMonthYearDetails","getNewMonthYear","getAppointments","year","month","data","get","useAppointments","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","selectFn","commonOptions","staleTime","cacheTime","queryClient","nextMonthYear","prefetchQuery","appointments","fallback","select","undefined","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus"],"sources":["C:/Users/franc/Desktop/projects/react-query-lazydays/client/src/components/appointments/hooks/useAppointments.ts"],"sourcesContent":["// @ts-nocheck\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport { useQuery, useQueryClient } from 'react-query';\r\n\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useUser } from '../../user/hooks/useUser';\r\nimport { AppointmentDateMap } from '../types';\r\nimport { getAvailableAppointments } from '../utils';\r\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\r\n\r\n// for useQuery call\r\nasync function getAppointments(\r\n  year: string,\r\n  month: string,\r\n): Promise<AppointmentDateMap> {\r\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\r\n  return data;\r\n}\r\n\r\n// types for hook return object\r\ninterface UseAppointments {\r\n  appointments: AppointmentDateMap;\r\n  monthYear: MonthYear;\r\n  updateMonthYear: (monthIncrement: number) => void;\r\n  showAll: boolean;\r\n  setShowAll: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n// The purpose of this hook:\r\n//   1. track the current month/year (aka monthYear) selected by the user\r\n//     1a. provide a way to update state\r\n//   2. return the appointments for that particular monthYear\r\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\r\n//     2b. prefetch the appointments for adjacent monthYears\r\n//   3. track the state of the filter (all appointments / available appointments)\r\n//     3a. return the only the applicable appointments for the current monthYear\r\nexport function useAppointments(): UseAppointments {\r\n  /** ****************** START 1: monthYear state *********************** */\r\n  // get the monthYear for the current date (for default monthYear state)\r\n  const currentMonthYear = getMonthYearDetails(dayjs());\r\n\r\n  // state to track current monthYear chosen by user\r\n  // state value is returned in hook return object\r\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\r\n\r\n  // setter to update monthYear obj in state when user changes month in view,\r\n  // returned in hook return object\r\n  function updateMonthYear(monthIncrement: number): void {\r\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\r\n  }\r\n  /** ****************** END 1: monthYear state ************************* */\r\n  /** ****************** START 2: filter appointments  ****************** */\r\n  // State and functions for filtering appointments to show all or only available\r\n  const [showAll, setShowAll] = useState(false);\r\n\r\n  // We will need imported function getAvailableAppointments here\r\n  // We need the user to pass to getAvailableAppointments so we can show\r\n  //   appointments that the logged-in user has reserved (in white)\r\n  const { user } = useUser();\r\n\r\n  const selectFn = useCallback(\r\n    (data) => getAvailableAppointments(data, user),\r\n    [user],\r\n  );\r\n\r\n  /** ****************** END 2: filter appointments  ******************** */\r\n  /** ****************** START 3: useQuery  ***************************** */\r\n  // useQuery call for appointments for the current monthYear\r\n\r\n  const commonOptions = {\r\n    staleTime: 0,\r\n    cacheTime: 300000, // 5 minutes\r\n  };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  useEffect(() => {\r\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\r\n    queryClient.prefetchQuery(\r\n      [queryKeys.appointments, nextMonthYear.year, nextMonthYear.month],\r\n      () => {\r\n        getAppointments(nextMonthYear.year, nextMonthYear.month), commonOptions;\r\n      },\r\n    );\r\n  }, [queryClient, monthYear]);\r\n\r\n  // TODO: update with useQuery!\r\n  // Notes:\r\n  //    1. appointments is an AppointmentDateMap (object with days of month\r\n  //       as properties, and arrays of appointments for that day as values)\r\n  //\r\n  //    2. The getAppointments query function needs monthYear.year and\r\n  //       monthYear.month\r\n  const fallback = {};\r\n\r\n  const { data: appointments = fallback } = useQuery(\r\n    [queryKeys.appointments, monthYear.year, monthYear.month],\r\n    () => {\r\n      getAppointments(monthYear.year, monthYear.month);\r\n    },\r\n    {\r\n      select: showAll ? undefined : selectFn,\r\n      staleTime: 0,\r\n      cacheTime: 300000, // 5 minutes\r\n      refetchOnMount: true,\r\n      refetchOnReconnect: true,\r\n      refetchOnWindowFocus: true,\r\n    },\r\n  );\r\n\r\n  /** ****************** END 3: useQuery  ******************************* */\r\n\r\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}